#!/bin/bash
#------------------------------------------------------------------------------
# SLURM template for multi run + job flow (mr_jobflow_template).
# Version 2.0                                     TACC Stampede 2014/19/15 Kent
#------------------------------------------------------------------------------
#SBATCH -J run#start#
#SBATCH -o run#start#.%j.out
#SBATCH -p normal
#SBATCH -n 8
#SBATCH -t 00:05:00
##BATCH -A <my_project>       #if you have more than 1 project, specify one
#set -x                       #uncomment to see execution statements of script

#    ********  READ DESCRIPTION AT END if you never been here before ***********

# begin run #       final run #   runs/job           tasks/run 
  start=#start#;    end=8;        runs_per_job=4     ntasks=2

# Submission directory        subdirectory (use . in lieu of DIR if using
  SUBMIT_DIR=`pwd`;           SUBDIR=DIR   #only using submission direcotry)

 next_start=$(( start + runs_per_job ))    #first run # of the next job
 set_end=$(( next_start - 1 ))             #last run # in this set of runs

        # Create next job script (job_#) by substituting #start# with next_start
        # \# evaluates to #, and is protected from substitution.
        # Must submit to "login#" @TACC; Make job_# dependent on this job's id 
        # (submit job_# from directory where first job submitted ($SUBMIT_DIR).

 if [ $next_start -le $end ]; then                  #no submission after end
    cat mr_jobflow_template | sed s'/#start\#/'$next_start'/' >job_$next_start
    ssh login1.stampede.tacc.utexas.edu \
        "cd $SUBMIT_DIR; sbatch -d afterok:$SLURM_JOBID job_$next_start"
 fi

                          # Loop over background jobs
                          # cd to execution directory ($EXE_DIR_$rn), 
                          # run cmd in background, cd out of dir.
                          # rn=run number, off=task offset, ntasks=tasks per run
 for rn in `seq $start $set_end` ; do  
   off=$(( rn - start ))
   
   [[ ! -d ${SUBDIR}_$rn ]] && mkdir ${SUBDIR}_$rn # 4 TESTING

   [[ $SUBDIR != . ]] && cd ${SUBDIR}_$rn     #if using subdirectory, go there

   echo "ibrun -n $ntasks -o $(( ntasks * off)) my_cmd">out_$rn  &  # 4 TESTING
        #ibrun -n $ntasks -o $(( ntasks * off)) my_cmd in_$rn > out_$rn &

   [[ $SUBDIR != . ]] && cd ..                #return to submission directory

done

wait       #IMPORTANT, do not remove!!!!

sleep 45   #4 TESTING


# Template for multi-run and  automatic dependent job submission.
#
# You can run this template, as is, to become familiar with flow parameters. 
# copy mr_jobflow_template to job_1, replace #start# with 1,
# then submit:  sbatch job_1 .

# Parameters:
#     Script executes runs with run numbers (rn) from "start" to "set_end".
#     The initial job is created as above, copy template to job_<#> (any #)
#     and substitute #start# with <#>, and  submit.  
#     "runs_per_job" runs are executed in the job (as determined from
#     ("start" + "runs_per_job" -1)) in the loop section.  Before executing the
#     loop of backgrounded runs, the next job script is create/submitted with
#     a dependency that only allows execution after the present job is finished.
#     (Be a good computer citizen, spread your work and submissions out.)
#     Subsequent runs are numbered from the "new_start" run number ("new_start"=
#     "set_end" + "runs_per_job") to "new_start" + "runs_per_job" - 1.

# Present setup:
#                         Submission Directory                   SUBMIT_DIR
#             ____________________|_________________________ ...
# execution  |     |     |     |     |     |     |     |
# dir        DIR_1 DIR_2 DIR_3 DIR_4 DIR_5 DIR_6 DIR_7 DIR_8 ... SUBDIR_$rn
#
#            <---------job_0------>| |<---------job_1------> ... job_$next_start
#  tasks/run   2     2     2     2      2     2     2     2      ntasks
#  runs/job             8                        8               runs_per_job
#  job dependency      job_0       <--          job_1
#
#  Remove lines with "4 TESTING" comment for a production template.
#  Change SUBDIR to an appropriate subdirectory name.
#  Create necessary inputs in your "subdirectory".
#  (common practice: use a subdirectory, as illustrated; otherwise use SUBDIR=.)
#  Uncomment the ibrun command and make appropriate substitions.
#  Don't forget to set "#SBATCH -n" to runs_per_job x ntasks
#  Trick: if you need extended digits, e.g. 00001, 00002, 00003, etc., use
#  printf. e.g  rn=100; rn_5d=`printf '%5.5d' $rn`; echo $rn_5d   prints 00100
# 
